// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String
    email         String       @unique
    password      String
    emailVerified DateTime?
    image         String?
    isTeacher     Boolean      @default(false)
    accounts      Account[]
    sessions      Session[]
    Classroom     Classroom[]
    EnrolledIn    EnrolledIn[]
    Test          Test[]
    QTable        QTable[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Classroom {
    id          String       @id @default(cuid())
    name        String
    description String?
    teacherId   String
    teacher     User         @relation(fields: [teacherId], references: [id])
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    EnrolledIn  EnrolledIn[]
    Content     Content[]
}

model EnrolledIn {
    id        String    @id @default(cuid())
    studentId String
    student   User      @relation(fields: [studentId], references: [id])
    classId   String
    classroom Classroom @relation(fields: [classId], references: [id])

    // student   User      @relation(fields: [studentId], references: [id])
    // classroom Classroom @relation(fields: [classId], references: [id])

    joinedAt DateTime @default(now())
}

model Content {
    id          String     @id @default(cuid())
    title       String
    description String?
    contentUrl  String
    vectorUrl   String
    fileType    String? // e.g., "pdf", "video", etc.
    classId     String
    classroom   Classroom  @relation(fields: [classId], references: [id])
    uploadedAt  DateTime   @default(now())
    Test        Test[]
    Question    Question[]
    States      States[]
}

model Test {
    id          String    @id @default(cuid())
    studentId   String
    contentId   String
    submittedAt DateTime?

    student User      @relation(fields: [studentId], references: [id])
    content Content   @relation(fields: [contentId], references: [id])
    Attempt Attempt[]
}

model Question {
    id            String    @id @default(cuid())
    questionText  String
    options       String // Array of options (e.g., ["A", "B", "C", "D"])
    correctOption String // Should match one of the entries in options
    contentId     String
    content       Content   @relation(fields: [contentId], references: [id])
    Attempt       Attempt[]
}

model Attempt {
    id             String   @id @default(cuid())
    testId         String
    questionId     String
    selectedOption String
    isCorrect      Boolean // Automatically marked based on comparison with correctOption
    attemptedAt    DateTime @default(now())

    test     Test     @relation(fields: [testId], references: [id])
    question Question @relation(fields: [questionId], references: [id])
}

model States {
    id        String  @id @default(cuid())
    contentId String
    content   Content @relation(fields: [contentId], references: [id])
    name      String
}

model QTable {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    state     String
    action    String
    qValue    Float
    nextState String
    createdAt DateTime @default(now())

    @@unique([userId, state, action]) // Enforce one entry per (user, state, action)
}
